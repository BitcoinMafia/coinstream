{
  "name": "geoip",
  "description": "GeoIP binding for node",
  "version": "0.4.12",
  "homepage": "http://github.com/kuno/GeoIP",
  "author": {
    "name": "Guan 'kuno' Qing",
    "email": "neokuno at Gmail dot com"
  },
  "contributors": [
    {
      "name": "Vladimir Dronnikov",
      "email": "dronnikov@gmail.com"
    },
    {
      "name": "Konstantin Käfer",
      "email": "github@kkaefer.com"
    },
    {
      "name": "Joe Vennix",
      "email": "joevennix@gmail.com"
    },
    {
      "name": "artems",
      "email": "tema.semenov@gmail.com"
    },
    {
      "name": "Sven Steinheißer",
      "email": "sven.steinheisser@googlemail.com"
    },
    {
      "name": "James Taylor",
      "email": "jt@gosquared.com"
    },
    {
      "name": "Robert Schultz",
      "email": "robert@cosmicrealms.com"
    },
    {
      "name": "Tim Oxley",
      "email": "secoif@gmail.com"
    },
    {
      "name": "sajal",
      "email": "sajal@turbobytes.com"
    },
    {
      "name": "Chris O'Hara",
      "email": "cohara87@gmail.com"
    },
    {
      "name": "James Taylor",
      "email": "jt@gosquared.com"
    },
    {
      "name": "Christopher Holt",
      "email": "cwholt@gmail.com"
    },
    {
      "name": "Nicolas Fouché",
      "email": "nicolas.fouche@gmail.com"
    },
    {
      "name": "King Koopa",
      "email": "bbyholm@abo.fi"
    },
    {
      "name": "Bernhard Valenti",
      "email": "bernhard@kargo.com"
    },
    {
      "name": "Pawel Maciejewski",
      "email": "fragphace@gmail.com"
    }
  ],
  "dependencies": {
    "nan": "~0.5.1"
  },
  "devDependencies": {
    "mocha": "~1.14.0",
    "chai": "~1.8.1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kuno/GeoIP.git"
  },
  "keywords": [
    "geoip",
    "geolocation"
  ],
  "bugs": {
    "url": "http://github.com/kuno/GeoIP/issues"
  },
  "main": "index.js",
  "directory": {
    "src": "./src",
    "test": "./test",
    "misc": "./misc",
    "sample": "./sample",
    "benchmark": "./benchmark"
  },
  "engine": {
    "node": "~0.8.0",
    "npm": "1"
  },
  "scripts": {
    "build": "node-gyp clean configure build",
    "test": "./bootstrap.sh && ./node_modules/.bin/mocha ./test/*.mocha.js",
    "install": "node-gyp rebuild"
  },
  "licences": [
    {
      "type": "LGPL2.1",
      "url": "http://www.gnu.org/licenses/lgpl-2.1.txt"
    }
  ],
  "gypfile": true,
  "readme": "__GeoIP binding for nodejs__\n\n[![NPM version](https://badge.fury.io/js/geoip.png)](http://badge.fury.io/js/geoip)\n[![Build status](https://secure.travis-ci.org/kuno/GeoIP.png)](http://travis-ci.org/kuno/GeoIP)\n[![Dependencies Status](https://david-dm.org/kuno/GeoIP.png)](https://david-dm.org/kuno/GeoIP)\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/kuno/geoip/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\nGet geolocation information based on domain or IP address.\n\n**Pure javascript implementation**\n\nIf you are looking for a pure javascript implementation, the [`node-geoip`](https://github.com/bluesmoon/node-geoip) maybe your choice.\n\n###Technical Architecture\n\n![new_architecture](https://github.com/kuno/GeoIP/raw/master/misc/new_architecture.png)\n\n###Memory leak issue\nAs up to the version 0.4.7 (commit [22dadd98646f75318412b54b3de90cc079d34b1d](https://github.com/kuno/GeoIP/commit/22dadd98646f75318412b54b3de90cc079d34b1d)), there will be some memory leak when new a object from GeoIP class.\n\nHere is the [report](https://gist.github.com/4357339), I'll update it frequently.\n\nFortunately, the number of leaked bytes is not huge, and you wont new a object very offen.\n\nIf you are willing to fix this but, please fork this project.\n\n###Need support special database?\nCorrently, this package supports the most common databases from MaxMind.\n\nBut, it still a lot of special databases out there.\n\nSince I am not a user of any product/service of maxmind, if you require this pacakge to support special db, please make sure you can delivery the testing db and the ip address/domain that can be used to against the db.\n\n\n##Installation\n\n### for nodejs >= 0.8.x\n\n    [sudo] npm install geoip [-g]\n\n### for nodejs 0.6.x\n\n    [sudo] npm install geoip@0.4.5 [-g]\n\n### for nodejs 0.4.x\n\n    [sudo] npm install geoip@0.4.4 [-g]\n\n### for nodejs older than 0.4.0\n\nFrom v0.4.0, geoip need nodejs >= 0.4.0, if you want to use it on old nodejs, you can:\n\n    npm install geoip@0.3.4-1\n\n\n##Usage\n\n###Check edition\n\n    var edition = geoip.check('/path/to/file');\n\n    console.log(edition); // output 'country', 'city', 'org'... so on\n\n###Create a new instance of sub-module, for example:\n\n    var city = new geoip.City('/path/to/GeoLiteCity.dat', false);  // not to cache the database\n\n    var city = new geoip.City('/path/to/GeoLiteCity.dat');  // the default option is cache\n\n###Update database on the fly:\n\n    city.update('/path/to/new/GeoLiteCity.dat');\n\n##Modules\n\n###Country\n\nipv4 address lookup\n\n    // Open the country data file\n    var Country = geoip.Country;\n\n    var country = new Country('/path/to/GeoIP.dat');\n\n    // Synchronous method(the recommended way):\n    var country_obj = country.lookupSync('8.8.8.8');\n\n    console.log(country_obj);\n    /*\n      { country_code: 'US',\n        country_code3: 'USA',\n        country_name: 'United States',\n        continent_code: 'NA'\n      }\n    */\n\n    // Asynchronous method:\n    country.lookup('www.google.com', function(err, data) {\n        if (err) {throw err;}\n        if (data) { // if not found, just return null\n            console.log(data);  // same as lookup method\n        }\n    });\n\nipv6 address lookup (Currently only Country and City module supports ipv6)\n\n    // Open the ipv6 edition of country module\n    var Country6 = geoip.Country6;\n\n    var country_v6 = new Country6('/path/to/GeoIPv6.dat');\n\n    // Synchronous method\n    var country_obj_v6 = country_v6.lookupSync('2607:f0d0:1002:0051:0000:0000:0000:0004');\n\n    console.log(country_obj_v6); // Same as ipv4\n    /*\n      { country_code: 'US',\n        country_code3: 'USA',\n        country_name: 'United States',\n        continent_code: 'NA'\n      }\n    */\n\n    // Asynchronous method\n    country_v6.lookup('2400:2352:b0f1:36c5:aa9d:694a:2f98:40bd', function(err, data_v6) {\n        if (err) {throw err;}\n        if (data_v6) {\n            console.log(data_v6);\n            /*\n             {\n               country_code: 'JP',\n               country_code3: 'JPN',\n               country_name: 'Japan',\n               continent_code: 'AS'\n              }\n\n            */\n        }\n    });\n\n\n###City\n\nipv4 address lookup\n\n    // Open the GeoLiteCity.dat file first.\n    var City = geoip.City;\n    var city = new City('/path/to/GeoLiteCity.dat');\n\n  Synchronous method:\n\n      var city_obj = city.lookupSync('8.8.8.8');\n      console.log(city_obj);\n      /*\n      Return an object of city information\n      {\n       \"country_code\":\"US\",\n       \"country_code3\":\"USA\",\n       \"country_name\":\"United States\",\n       \"continet_code\":\"NA\",\n       \"region\":\"CA\",\n       \"city\":\"Mountain View\",\n       \"postal_code\":\"94043\",\n       \"latitude\":37.41919999999999,\n       \"longitude\":-122.0574,\n       \"dma_code\":807,\n       \"metro_code\":807,\n       \"area_code\":650\n       }\n       */\n\n  Asynchronous method:\n\n      city.lookup('www.google.com', function(err, data) {\n        if (err) {throw err;}\n        if (data) {\n            console.log(data);\n        }\n      });\n\n\nipv6 address lookup\n\n    // Open the GeoLiteCityv6.dat file first.\n    var City6 = geoip.City6;\n    var city6 = new City6('/path/to/GeoLiteCityv6.dat');\n\n  Synchronous method:\n\n      var city6_obj = city6.lookupSync('2002:7679:b9af:db9b:ab51:501a:db4e:2d');\n      console.log(city6_obj);\n      /*\n      {\n       country_code: 'CN',\n       country_code3: 'CHN',\n       country_name: 'China',\n       region: '32',\n       city: 'Chengdu',\n       latitude: 30.66670036315918,\n       longitude: 104.06670379638672,\n       continent_code: 'AS'\n      }\n      */\n\n  Asynchronous method:\n\n      city6.lookup('2002:c6aa:2dc8:b719:4314:2a7d:e31c:fe73', function(err, data) {\n        if (err) {throw err;}\n        if (data) {\n            console.log(data);\n            /* As expected ,return an object that contains city information\n            {\n             country_code: 'US',\n             country_code3: 'USA',\n             country_name: 'United States',\n             region: 'CO',\n             city: 'Englewood',\n             postal_code: '80112',\n             latitude: 39.569000244140625,\n             longitude: -104.85820007324219,\n             continent_code: 'NA'\n            }\n            */\n          }\n      });\n\n###Organization\n\n    var Org = geoip.Org;\n    var org = new Org('/path/to/file')  // Org module can open three edition database 'org', 'asnum', 'isp'\n\nSynchronous method:\n\n    var org_str = org.lookupSync('8.8.8.8');\n\n    console.log(org_str);\n    /*\n      The type of returned data is string, for example:\n\n      'Genuity'\n      'AS15169 Google Inc.'\n\n      no longer an object\n    */\n\nAsynchronous method:\n\n    org.lookup('www.google.com', function(err, data) {\n        if (err) {throw err;}\n        if (data) {\n            console.log(data);\n        }\n    });\n\n\n###Region\n\n    var Region = geoip.Region;\n    var region = new Region('/path/to/GeoIPRegion.dat');\n\nSynchronous method:\n\n    var region_obj = region.lookupSync('8.8.8.8');\n\n    console.log('region_obj);\n    /*\n      region object has two properties:\n      { country_code: 'US', region: 'CO' }\n\n    */\n\nAsynchronous method:\n\n    region.lookup('www.google.com', function(err, data) {\n        if (err) {throw err;}\n        if (data) {\n          console.log(data);\n        }\n    });\n\n\n###NetSpeed\n\n    var NetSpeed = geoip.NetSpeed;\n    var netspeed = new NetSpeed('/path/to/GeoIPNetSpeed.dat');\n\nSynchronous method:\n\n    var netspeed_str = netspeed.lookupSync('8.8.8.8');\n\n    console.log(netspeed_str);\n    /*\n      netspeed_str just a simple string, 'Dialup', 'Corprate'... so on\n    */\n\nAsynchronous method:\n\n    netspeed.lookup('www.google.com', function(err, data) {\n        if (err) {throw err;}\n        if (data) {\n          console.log(data);  // Maybe return 'unknow' or different from lookup method\n        }\n    });\n",
  "readmeFilename": "README.md",
  "_id": "geoip@0.4.12",
  "_from": "geoip@*"
}
